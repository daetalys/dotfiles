#+TITLE: GNU Emacs Config
#+AUTHOR: DÃ¦talys
#+DESCRIPTION: This is my personal configuration file for GNU Emacs.
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#important-programs-to-load-first][Important Programs to Load First]]
  - [[#elpaca-package-manager][Elpaca Package Manager]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#fonts][Fonts]]
- [[#graphical-user-interface-tweaks][Graphical User Interface Tweaks]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and Truncated Lines]]
- [[#org-mode][Org Mode]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
- [[#which-key][Which-Key]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Elpaca Package Manager
This code configures Elpaca, a package manager for Emacs.

#+begin_src emacs-lisp
  ;; Initialize some variables used by Elpaca
  (defvar elpaca-installer-version 0.4)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  ;; Loads the Elpaca package, cloning it from GitHub if necessary
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    ;; Omitted rest of the Elpaca setup code for brevity
#+end_src

** Load Evil Mode
This code configures Evil mode, an Emacs extension for Vim emulation.

#+begin_src emacs-lisp
  ;; Enable use-package, a package that helps simplify package management
  (elpaca elpaca-use-package
    (elpaca-use-package-mode)
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;; Install and configure Evil mode
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))

  ;; Install and configure related packages: evil-collection and evil-tutor
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))
  (use-package evil-tutor)
  
  ;; Configure built-in Emacs features
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Defer execution of BODY
  (elpaca nil (message "deferred"))
#+end_src

** General Keybindings
This section configures general keyboard shortcuts for various actions.

#+begin_src emacs-lisp
  ;; Load the general package, which provides a more convenient way to define keybindings
  (use-package general
    :config
    (general-evil-setup)

    ;; Define a "leader key", a special key that triggers a set of custom shortcuts
    (general-create-definer daetalytica/leader-keys
      :states '(normal insert visual emacs)
      :keymaps 'override
      :prefix "SPC"
      :global-prefix "M-SPC")

    ;; Define some custom shortcuts triggered by the leader key
    (daetalytica/leader-keys
      "b" '(:ignore t :wk "buffer")
      "bb" '(switch-to-buffer :wk "Switch buffer")
      "bk" '(kill-this-buffer :wk "Kill this buffer")
      "bn" '(next-buffer :wk "Next buffer")
      "bp" '(previous-buffer :wk "Previous buffer")
      "br" '(revert-buffer :wk "Reload buffer")))
#+end_src

* FONTS
Here, we specify the different fonts Emacs should use in different contexts.

#+begin_src emacs-lisp
  ;; Define the default font
  (set-face-attribute 'default nil
    :font "Fira Code"
    :height 110
    :weight 'medium)
  
  ;; Define other font settings
  ;; Rest of the font configuration code omitted for brevity
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
This section customizes some graphical elements of Emacs.

** Disable Menubar, Toolbars and Scrollbars
This code turns off some elements of the default Emacs interface.

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncated Lines
This code turns on line numbering and "truncated lines" mode, which affects how long lines are displayed.

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

* ORG MODE
Here we configure Org mode, a versatile mode for note-taking and project planning.

** Enabling Table of Contents
This code enables automatic generation of a table of contents in Org mode documents.

#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enabling Org Bullets
This code enables "org-bullets", which replaces asterisks with more attractive bullets in Org mode.

#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

* WHICH-KEY
Which-key is a package that displays available keybindings in popup windows.

#+begin_src emacs-lisp
  (use-package which-key
    :init
    (which-key-mode 1)
    :config
    ;; Configure various aspects of which-key
    ;; Rest of the which-key configuration code omitted for brevity
    )
#+end_src
