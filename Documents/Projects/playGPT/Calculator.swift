import UIKit  class ViewController: UIViewController {  
    // MARK: - Properties 
    private var calculatorMode: CalculatorMode = .portrait  
    // MARK: - UI Elements 
    private let calculatorView: UIView = { let view = UIView() view.translatesAutoresizingMaskIntoConstraints = false view.backgroundColor = .white return view }()  private let displayLabel: UILabel = { let label = UILabel() label.translatesAutoresizingMaskIntoConstraints = false label.font = UIFont.systemFont(ofSize: 24) label.textAlignment = .right return label }()  private let clearButton: UIButton = { let button = UIButton() button.translatesAutoresizingMaskIntoConstraints = false button.setTitle("C", for: .normal) button.setTitleColor(.black, for: .normal) return button }()  private let numberPad: UIView = { let view = UIView() view.translatesAutoresizingMaskIntoConstraints = false view.backgroundColor = .white return view }()  private let scientificPad: UIView = { let view = UIView() view.translatesAutoresizingMaskIntoConstraints = false view.backgroundColor = .white return view }()  private let unitPad: UIView = { let view = UIView() view.translatesAutoresizingMaskIntoConstraints = false view.backgroundColor = .white return view }()  
    // MARK: - View Lifecycle 
    override func viewDidLoad() { super.viewDidLoad() configureViewController() configureUI() }  override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) { super.viewWillTransition(to: size, with: coordinator) if UIDevice.current.orientation.isLandscape { calculatorMode = .landscape } else { calculatorMode = .portrait } configureUI() }  
    // MARK: - Helper Functions 
    private func configureViewController() { view.backgroundColor = .systemGray6 }  private func configureUI() { view.addSubview(calculatorView) NSLayoutConstraint.activate([ calculatorView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor), calculatorView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor), calculatorView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor), calculatorView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor) ])  calculatorView.addSubview(displayLabel) NSLayoutConstraint.activate([ displayLabel.topAnchor.constraint(equalTo: calculatorView.topAnchor, constant: 16), displayLabel.leadingAnchor.constraint(equalTo: calculatorView.leadingAnchor, constant: 16), displayLabel.trailingAnchor.constraint(equalTo: calculatorView.trailingAnchor, constant: -16) ])  calculatorView.addSubview(clearButton) NSLayoutConstraint.activate([ clearButton.topAnchor.constraint(equalTo: displayLabel.bottomAnchor, constant: 16), clearButton.leadingAnchor.constraint(equalTo: calculatorView.leadingAnchor, constant: 16), clearButton.trailingAnchor.constraint(equalTo: calculatorView.trailingAnchor, constant: -16) ])  calculatorView.addSubview(numberPad) NSLayoutConstraint.activate([ numberPad.topAnchor.constraint(equalTo: clearButton.bottomAnchor, constant: 16), numberPad.leadingAnchor.constraint(equalTo: calculatorView.leadingAnchor, constant: 16), numberPad.trailingAnchor.constraint(equalTo: calculatorView.trailingAnchor, constant: -16) ])  
    // Add additional UI elements depending on calculator mode 
    if calculatorMode == .portrait { numberPad.bottomAnchor.constraint(equalTo: calculatorView.bottomAnchor, constant: -16).isActive = true calculatorView.addSubview(scientificPad) scientificPad.isHidden = true NSLayoutConstraint.activate([ scientificPad.topAnchor.constraint(equalTo: clearButton.bottomAnchor, constant: 16), scientificPad.leadingAnchor.constraint(equalTo: calculatorView.leadingAnchor, constant: 16), scientificPad.trailingAnchor.constraint(equalTo: calculatorView.trailingAnchor, constant: -16), scientificPad.bottomAnchor.constraint(equalTo: calculatorView.bottomAnchor, constant: -16) ]) } else { numberPad.bottomAnchor.constraint(equalTo: calculatorView.centerYAnchor).isActive = true calculatorView.addSubview(unitPad) NSLayoutConstraint.activate([ unitPad.topAnchor.constraint(equalTo: numberPad.bottomAnchor, constant: 16), unitPad.leadingAnchor.constraint(equalTo: calculatorView.leadingAnchor, constant: 16), unitPad.trailingAnchor.constraint(equalTo: calculatorView.trailingAnchor, constant: -16), unitPad.bottomAnchor.constraint(equalTo: calculatorView.bottomAnchor, constant: -16) ]) } }  }